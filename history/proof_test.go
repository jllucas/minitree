package history

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestComputeHashPostOrder(t *testing.T) {

}

func TestVerifyMembershipProof(t *testing.T) {

	membershipProofv2 := historyTree{
		version: 2,
		content: map[position]hash{
			{index: 2, layer: 0}: {0xa9, 0x53, 0xf0, 0x9a, 0x1b, 0x6b, 0x67, 0x25, 0xb8, 0x19, 0x56, 0xe9, 0xad, 0xb, 0x1e, 0xb4, 0x9e, 0x3a, 0xd4, 0x0, 0x4, 0xc0, 0x43, 0x7, 0xef, 0x8a, 0xf6, 0x24, 0x6a, 0x5, 0x41, 0x16},
			{index: 3, layer: 0}: {},
			{index: 0, layer: 1}: {0xfd, 0x9a, 0xf3, 0xd2, 0x89, 0xe1, 0xc7, 0xb2, 0x2c, 0x64, 0x8a, 0x4f, 0x31, 0x63, 0x81, 0xe7, 0xc, 0x63, 0xf8, 0x29, 0x4d, 0x3d, 0xc5, 0x7d, 0xbe, 0xc8, 0x2d, 0x32, 0x92, 0x40, 0x91, 0x5},
		},
	}

	membershipProofv3 := historyTree{
		version: 3,
		content: map[position]hash{
			{index: 2, layer: 0}: {0xa9, 0x53, 0xf0, 0x9a, 0x1b, 0x6b, 0x67, 0x25, 0xb8, 0x19, 0x56, 0xe9, 0xad, 0xb, 0x1e, 0xb4, 0x9e, 0x3a, 0xd4, 0x0, 0x4, 0xc0, 0x43, 0x7, 0xef, 0x8a, 0xf6, 0x24, 0x6a, 0x5, 0x41, 0x16},
			{index: 3, layer: 0}: {0xb, 0x8e, 0xfa, 0x5a, 0x3b, 0xf1, 0x4, 0x41, 0x3a, 0x72, 0x5c, 0x6f, 0xf0, 0x45, 0x9a, 0x6b, 0xe1, 0x2b, 0x1f, 0xd3, 0x33, 0x14, 0xcb, 0xb1, 0x38, 0x74, 0x5b, 0xaf, 0x39, 0x50, 0x4a, 0xe5},
			{index: 0, layer: 1}: {0xfd, 0x9a, 0xf3, 0xd2, 0x89, 0xe1, 0xc7, 0xb2, 0x2c, 0x64, 0x8a, 0x4f, 0x31, 0x63, 0x81, 0xe7, 0xc, 0x63, 0xf8, 0x29, 0x4d, 0x3d, 0xc5, 0x7d, 0xbe, 0xc8, 0x2d, 0x32, 0x92, 0x40, 0x91, 0x5},
		},
	}

	testsOK := []struct {
		index           int
		membershipProof historyTree
		rootHash        hash
		eventHash       hash
	}{
		{2,
			membershipProofv2,
			hash{0x5a, 0x81, 0x1e, 0xdb, 0xa, 0x1f, 0xe9, 0xdb, 0xae, 0x63, 0x15, 0x46, 0xf5, 0x39, 0x1f, 0x8c, 0x31, 0x9c, 0x31, 0x4e, 0xb2, 0x4f, 0x54, 0x11, 0x82, 0xa7, 0xd, 0x13, 0xa1, 0x27, 0x44, 0xc9},
			hash{0xa9, 0x53, 0xf0, 0x9a, 0x1b, 0x6b, 0x67, 0x25, 0xb8, 0x19, 0x56, 0xe9, 0xad, 0xb, 0x1e, 0xb4, 0x9e, 0x3a, 0xd4, 0x0, 0x4, 0xc0, 0x43, 0x7, 0xef, 0x8a, 0xf6, 0x24, 0x6a, 0x5, 0x41, 0x16},
		},
		{2,
			membershipProofv3,
			hash{0x51, 0x3, 0x81, 0x37, 0x79, 0x81, 0x1e, 0x71, 0x39, 0xcb, 0xc7, 0x2d, 0xc6, 0x1e, 0x37, 0x71, 0xe3, 0x54, 0x24, 0x94, 0xd5, 0xe9, 0xe1, 0xc8, 0x80, 0xd7, 0x22, 0xfc, 0x6c, 0x2, 0xb1, 0x25},
			hash{0xa9, 0x53, 0xf0, 0x9a, 0x1b, 0x6b, 0x67, 0x25, 0xb8, 0x19, 0x56, 0xe9, 0xad, 0xb, 0x1e, 0xb4, 0x9e, 0x3a, 0xd4, 0x0, 0x4, 0xc0, 0x43, 0x7, 0xef, 0x8a, 0xf6, 0x24, 0x6a, 0x5, 0x41, 0x16},
		},
	}

	for _, test := range testsOK {
		isMember := test.membershipProof.VerifyMembershipProof(test.index, test.rootHash, test.eventHash)
		assert.True(t, isMember, "")
	}

}

func TestVerifyIncrementalProof(t *testing.T) {
	incrementalProofv4 := historyTree{
		version: 4,
		content: map[position]hash{
			{index: 2, layer: 0}: {0xa9, 0x53, 0xf0, 0x9a, 0x1b, 0x6b, 0x67, 0x25, 0xb8, 0x19, 0x56, 0xe9, 0xad, 0xb, 0x1e, 0xb4, 0x9e, 0x3a, 0xd4, 0x0, 0x4, 0xc0, 0x43, 0x7, 0xef, 0x8a, 0xf6, 0x24, 0x6a, 0x5, 0x41, 0x16},
			{index: 3, layer: 0}: {0xb, 0x8e, 0xfa, 0x5a, 0x3b, 0xf1, 0x4, 0x41, 0x3a, 0x72, 0x5c, 0x6f, 0xf0, 0x45, 0x9a, 0x6b, 0xe1, 0x2b, 0x1f, 0xd3, 0x33, 0x14, 0xcb, 0xb1, 0x38, 0x74, 0x5b, 0xaf, 0x39, 0x50, 0x4a, 0xe5},
			{index: 0, layer: 1}: {0xfd, 0x9a, 0xf3, 0xd2, 0x89, 0xe1, 0xc7, 0xb2, 0x2c, 0x64, 0x8a, 0x4f, 0x31, 0x63, 0x81, 0xe7, 0xc, 0x63, 0xf8, 0x29, 0x4d, 0x3d, 0xc5, 0x7d, 0xbe, 0xc8, 0x2d, 0x32, 0x92, 0x40, 0x91, 0x5},
			{index: 4, layer: 0}: {0x6c, 0xd5, 0xb6, 0xe5, 0x19, 0x36, 0xa4, 0x42, 0xb9, 0x73, 0x66, 0xc, 0x21, 0x55, 0x3d, 0xd2, 0x2b, 0xd7, 0x2d, 0xdc, 0x87, 0x51, 0x13, 0x2a, 0x94, 0x34, 0x75, 0x28, 0x81, 0x13, 0xb4, 0xc0},
			{index: 5, layer: 0}: {},
			{index: 6, layer: 1}: {},
		},
	}

	testsOK := []struct {
		commitmentI, commitmentJ hash
		indexI, indexJ           int
		incrementalProof         historyTree
	}{
		{hash{0x5a, 0x81, 0x1e, 0xdb, 0xa, 0x1f, 0xe9, 0xdb, 0xae, 0x63, 0x15, 0x46, 0xf5, 0x39, 0x1f, 0x8c, 0x31, 0x9c, 0x31, 0x4e, 0xb2, 0x4f, 0x54, 0x11, 0x82, 0xa7, 0xd, 0x13, 0xa1, 0x27, 0x44, 0xc9},
			hash{0x5, 0x20, 0x71, 0x91, 0x8, 0x93, 0x3d, 0x29, 0x47, 0x41, 0x90, 0xff, 0x37, 0x77, 0x4a, 0xfa, 0x8, 0xe5, 0x1f, 0x8a, 0x73, 0x91, 0xeb, 0x1b, 0xaa, 0xf5, 0x0, 0x51, 0x27, 0xf6, 0xc6, 0x62},
			2,
			4,
			incrementalProofv4,
		},
	}

	for _, test := range testsOK {
		notTampered := test.incrementalProof.VerifyIncrementalProof(test.commitmentI, test.commitmentJ, test.indexI, test.indexJ)
		assert.True(t, notTampered, "")
	}
}
